import React, { useEffect, useState, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import "./App.css";

const Boy = React.memo(() => {
    const [position, setPosition] = useState({
        x: Math.random() * (window.innerWidth - 100),
        y: Math.random() * (window.innerHeight - 200),
    });
    const [message, setMessage] = useState("");
    const [hearts, setHearts] = useState([]);

    const romanticMessages = [
        "Anh nh·ªõ em nhi·ªÅu l·∫Øm!",
        "Em l√† √°nh s√°ng c·ªßa anh.",
        "Tr√°i tim anh ch·ªâ c√≥ em.",
        "Y√™u em ƒë·∫øn m√£i m√£i.",
        "M·ªói ng√†y b√™n em l√† m·ªôt ng√†y h·∫°nh ph√∫c.",
        "Em l√† ƒëi·ªÅu tuy·ªát v·ªùi nh·∫•t trong cu·ªôc ƒë·ªùi anh.",
        "Anh y√™u em nhi·ªÅu h∆°n m·ªói ng√†y.",
        "Ch·ªâ c·∫ßn em c∆∞·ªùi, m·ªçi th·ª© ƒë·ªÅu tr·ªü n√™n ƒë·∫πp ƒë·∫Ω.",
        "Em l√† gi·∫•c m∆° ng·ªçt ng√†o nh·∫•t c·ªßa anh.",
        "Tr√°i tim anh ch·ªâ ƒë·∫≠p v√¨ em.",
        "Anh h·∫°nh ph√∫c nh·∫•t khi c√≥ em b√™n c·∫°nh.",
        "T√¨nh y√™u c·ªßa anh d√†nh cho em l√† m√£i m√£i.",
        "Em l√† ng∆∞·ªùi anh y√™u nh·∫•t tr√™n th·∫ø gi·ªõi n√†y.",
        "Kh√¥ng g√¨ c√≥ th·ªÉ thay th·∫ø ƒë∆∞·ª£c em trong l√≤ng anh.",
        "Anh ch·ªâ c·∫ßn em trong cu·ªôc ƒë·ªùi n√†y.",
        "Em l√†m cho cu·ªôc s·ªëng c·ªßa anh th√™m √Ω nghƒ©a.",
        "Anh s·∫Ω m√£i y√™u em, d√π b·∫•t c·ª© ƒëi·ªÅu g√¨ x·∫£y ra.",
        "B√™n em, anh c√≥ c·∫£ th·∫ø gi·ªõi.",
        "Em l√† n√†ng c√¥ng ch√∫a trong c√¢u chuy·ªán c·ªßa anh.",
        "Tr√°i tim anh thu·ªôc v·ªÅ em m√£i m√£i.",
        "Y√™u em h∆°n c·∫£ ch√≠nh b·∫£n th√¢n m√¨nh.",
    ];

    useEffect(() => {
        const interval = setInterval(() => {
            setPosition((prev) => ({
                x: Math.random() * (window.innerWidth - 100),
                y: Math.random() * (window.innerHeight - 200),
            }));
            setMessage(
                romanticMessages[
                    Math.floor(Math.random() * romanticMessages.length)
                ]
            );
        }, 5000);
        return () => clearInterval(interval);
    }, []);

    const handleTap = useCallback(() => {
        if (hearts.length < 20) {
            const newHearts = Array(5)
                .fill(0)
                .map(() => ({
                    id: Math.random(),
                    x: position.x + Math.random() * 50 - 25,
                    y: position.y,
                }));
            setHearts((prev) => [...prev, ...newHearts].slice(0, 20));
            setMessage(
                romanticMessages[
                    Math.floor(Math.random() * romanticMessages.length)
                ]
            );
        }
    }, [position, hearts]);

    const boyVariants = {
        initial: { opacity: 0, scale: 0 },
        animate: {
            opacity: 1,
            scale: 1,
            x: [0, 10, -10, 0],
            transition: { duration: 2, repeat: Infinity },
        },
        wave: {
            rotate: [0, 15, -15, 0],
            transition: { duration: 1, repeat: 2 },
        },
        wink: { scaleY: [1, 0.7, 1], transition: { duration: 0.3, repeat: 2 } },
    };

    return (
        <>
            <motion.div
                className="boy"
                style={{ left: position.x, top: position.y }}
                variants={boyVariants}
                initial="initial"
                animate="animate"
                whileHover="wave"
                whileTap={{ onTap: handleTap, variant: "wink" }}
                drag
                dragConstraints={{
                    left: 0,
                    right: window.innerWidth - 100,
                    top: 0,
                    bottom: window.innerHeight - 200,
                }}
            >
                <div className="boy-body">üë¶</div>
                {message && (
                    <motion.div
                        className="message"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0 }}
                    >
                        {message}
                    </motion.div>
                )}
            </motion.div>

            <AnimatePresence>
                {hearts.map((heart) => (
                    <motion.div
                        key={heart.id}
                        className="heart"
                        style={{ left: heart.x, top: heart.y }}
                        initial={{ opacity: 1, scale: 1 }}
                        animate={{ y: heart.y - 100, opacity: 0, scale: 1.5 }}
                        transition={{ duration: 2 }}
                        onAnimationComplete={() =>
                            setHearts((prev) =>
                                prev.filter((h) => h.id !== heart.id)
                            )
                        }
                    >
                        ‚ù§Ô∏è
                    </motion.div>
                ))}
            </AnimatePresence>
        </>
    );
});

function App() {
    return (
        <div className="App">
            <div className="background" />
            <h1 className="title">T√¨nh Y√™u L√£ng M·∫°n</h1>
            <Boy />
        </div>
    );
}

export default App;
